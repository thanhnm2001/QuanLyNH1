/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Display;

import dao.BillDAO;
import dao.CustomerDAO;
import dao.DetailBillDAO;
import dao.FoodDAO;
import helper.Auth;
import helper.JDBCHelper;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Bill;
import model.Customer;
import model.DetailBill;
import model.Food;

/**
 *
 * @author Administrator
 */
public class DatBanJFrame extends javax.swing.JFrame {

    List<Food> lst = new ArrayList<>();
    List<Customer> lstCustomer=new ArrayList<>();
    BillDAO dao2 = new BillDAO();
    FoodDAO dao = new FoodDAO();
    CustomerDAO dao1 = new CustomerDAO();
    DefaultTableModel model;
    DetailBillDAO dao3 = new DetailBillDAO();

    int a;
    private String maBan;
    private int Size;
    private String trangThai;

    public DatBanJFrame(String maBan, int Size, String trangThai) {
        this.maBan = maBan;
        this.Size = Size;
        this.trangThai = trangThai;
        initComponents();
        setLocationRelativeTo(null);
        getContentPane().setBackground(Color.white);
        setTitle(maBan);
        model = (DefaultTableModel) tblList.getModel();

        lst = dao.selectAll();
        lstCustomer=dao1.selectAll();
        if (trangThai.equalsIgnoreCase("Trong")) {
            btnPay.setEnabled(false);
        }
        loadHD();

//        JOptionPane.showMessageDialog(this, tblList.getRowCount());
//        pnl1.setSize(300, 274);
//        pnl1.setLayout(new GridLayout(8, 3));
//   pnl1.setLayout(new FlowLayout());
        ActionListener buttonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                for (int i = 0; i < lst.size(); i++) {

                }
            }
        };
        for (int i = 0; i < lst.size(); i++) {
            JButton btn = new JButton(lst.get(i).getNameFood());
//            btn.setBounds(20, 20, 20, 20);
            pnl1.add(btn);
            btn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    int row = tblList.getRowCount();
                    int rex = 0;
                    for (int i = 0; i < lst.size(); i++) {

                        if (btn.getText().equalsIgnoreCase(lst.get(i).getNameFood())) {
                            if (row > 0) {
                                for (int j = 0; j < row; j++) {
                                    if (btn.getText().equalsIgnoreCase((String) tblList.getValueAt(j, 0))) {
                                        int value = (Integer) tblList.getValueAt(j, 2) + 1;
                                        tblList.setValueAt(value, j, 2);
                                        rex++;
                                        total();
//                               break;

                                    }
                                }
                                if (rex == 0) {
                                    model.addRow(new Object[]{lst.get(i).getNameFood(), lst.get(i).getPrice(), 1});
//                                JOptionPane.showMessageDialog(pnl1, (Integer)tblList.getValueAt(0, 2));
                                    total();
                                }
                            } else {
                                model.addRow(new Object[]{lst.get(i).getNameFood(), lst.get(i).getPrice(), 1});
//                                JOptionPane.showMessageDialog(pnl1, (Integer)tblList.getValueAt(0, 2));
                                total();

                            }

                        }

                    }

                }
            });

        }

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnPutTable = new javax.swing.JButton();
        btnPay = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pnl1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblList = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        txtMaKH = new javax.swing.JTextField();
        txtTenKH = new javax.swing.JTextField();
        txtMaHD = new javax.swing.JTextField();
        txtSDT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNgaySinh = new javax.swing.JTextField();
        txtCMT = new javax.swing.JTextField();

        setTitle("Bàn 01");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Mã khách hàng");

        btnPutTable.setText("Đặt bàn");
        btnPutTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPutTableActionPerformed(evt);
            }
        });

        btnPay.setText("Thanh Toán");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        jLabel2.setText("Tên khách hàng");

        jLabel3.setText("Mã Hóa Đơn");

        jLabel4.setText("SDT");

        pnl1.setLayout(new java.awt.GridLayout(8, 3));

        tblList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên món", "Giá", "Số lượng", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblList);
        if (tblList.getColumnModel().getColumnCount() > 0) {
            tblList.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel5.setText("Total:");

        jLabel6.setText("Ngày sinh");

        jLabel7.setText("CMT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnl1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCMT, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(40, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPutTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnPay, btnPutTable});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPutTable, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPay)
                        .addComponent(jLabel5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnPay, btnPutTable, jLabel5, lblTotal});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, txtMaKH});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel4, txtCMT, txtNgaySinh, txtSDT});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, txtMaHD, txtTenKH});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPutTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPutTableActionPerformed
     if(trangThai.equalsIgnoreCase("dang hoat dong")){
       if(check()){
             repairCustomer();
             for(int i=0;i<Size;i++){
                 if(maBan.equalsIgnoreCase("Bàn "+i)){
                     repairBill("b0"+i);
                 }
             }
             updateDetailBill();
             addCTHD();
         JOptionPane.showMessageDialog(this,"Đặt lại thành công");
       }
     }else{
           if(check()){
                add();
        for (int i = 1; i <= Size; i++) {
            if (maBan.equalsIgnoreCase("Bàn " + i)) {

                addHD("b0" + i);
                addCTHD();
//             JOptionPane.showMessageDialog(this, "b0"+i);
                String sql = "update ban set trangthai=? where maban=?";
                JDBCHelper.update(sql, "dang hoat dong", "b0" + i);
                JOptionPane.showMessageDialog(this, "Đặt bàn thành công");
                this.dispose();
                TrangBan tb = new TrangBan();
        tb.setVisible(true);

            }
        }
           }
     }
//        String sql = "update ban set trangthai=? where maban=?";
//        JDBCHelper.update(sql, "dang hoat dong", "b01");
//        JOptionPane.showMessageDialog(this, "Đặt bàn thành công");


    }//GEN-LAST:event_btnPutTableActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        for (int i = 1; i <= Size; i++) {
            if (maBan.equalsIgnoreCase("Bàn " + i)) {
                String sql = "update ban set trangthai=? where maban=?";
                JDBCHelper.update(sql, "Trong", "b0" + i);
                JOptionPane.showMessageDialog(this, "Thanh toán thành công");
                this.dispose();
                TrangBan tb = new TrangBan();
                tb.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnPayActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
        TrangBan tb = new TrangBan();
        tb.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DatBanJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DatBanJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DatBanJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DatBanJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new DatBanJFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnPutTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnl1;
    private javax.swing.JTable tblList;
    private javax.swing.JTextField txtCMT;
    private javax.swing.JTextField txtMaHD;
    private javax.swing.JTextField txtMaKH;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenKH;
    // End of variables declaration//GEN-END:variables
private void setUpButton() {

    }

    private void total() {
        float total = 0;
        int row = tblList.getRowCount();
        for (int i = 0; i < row; i++) {
            float price =(Float)tblList.getValueAt(i, 1);
            int amount=(Integer)tblList.getValueAt(i, 2);
            float number=price*amount;
          
            total += number;
            lblTotal.setText(total + "");
        }
    }

//    private void check() {
////        int row=tblList.getRowCount();
////         for(int i=0;i<row;i++){
////            if(btn.getText().equalsIgnoreCase((String)tblList.getValueAt(i, 0))){
////                int value=(Integer)tblList.getValueAt(i, 0);
////                JOptionPane.showMessageDialog(this, value);
////                
////                
////int row=tblList.getRowCount();
////for(int i=0;i<row;i++){
////    JOptionPane.showMessageDialog(this, (String)tblList.getValueAt(i, 0));
////}
//    }

    private void check2(String btnText) {
        int row = tblList.getRowCount();
        for (int i = 0; i < row; i++) {
            if (btnText.equalsIgnoreCase((String) tblList.getValueAt(i, 0))) {
                int value = (Integer) tblList.getValueAt(i, 2) + 1;
                tblList.setValueAt(value, i, 2);

            }
        }
    }

    private boolean check3(String btnText) {
        int row = tblList.getRowCount();
        if (row < 1) {
            return false;
        } else {
            for (int i = 0; i < row; i++) {
                if (btnText.equalsIgnoreCase((String) tblList.getValueAt(i, 0))) {
                    int value = (Integer) tblList.getValueAt(i, 2) + 1;
                    tblList.setValueAt(value, i, 2);
                    return true;
                } else {
                    return false;
                }

            }
        }
        return false;
    }

    private void add() {
        try {
            String maKH = txtMaKH.getText();
            String hoTen = txtTenKH.getText();
            String SDT = txtSDT.getText();
            String CMT = txtCMT.getText();
            Date ngaySinh = new SimpleDateFormat("yyyy-MM-dd").parse(txtNgaySinh.getText());

            Customer cs = new Customer(maKH, hoTen, ngaySinh, SDT, CMT);
            dao1.insert(cs);
////Date date=new Date();
            //phải có định dạng của simple date format

        } catch (Exception e) {
        }
    }

    private void addHD(String maban) {
        String maHD = txtMaHD.getText();
        String maKH = txtMaKH.getText();
        String maNV = Auth.user.getMaNV();
        String maBan = maban;
        float thanhTien = Float.parseFloat(lblTotal.getText());
        Date date = new Date();
        Bill bill = new Bill(maHD, maKH, maNV, maBan, thanhTien, date);
        dao2.insert(bill);

    }

    private void addCTHD() {
        int row = tblList.getRowCount();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j).getNameFood().equalsIgnoreCase((String) tblList.getValueAt(i, 0))) {
                    String maMA = lst.get(i).getIdFood();
                    String maHD = txtMaHD.getText();
                    int SL = (Integer) tblList.getValueAt(i, 2);
                    DetailBill detailBill = new DetailBill(maHD, maMA, SL);
                    dao3.insert(detailBill);

                }
            }
        }
    }

    private void loadHD() {
        String mB = "";
        for (int i = 1; i <= Size; i++) {
            if (maBan.equalsIgnoreCase("Bàn " + i)) {
                mB = "b0" + i;
            }
        }
        if (trangThai.equalsIgnoreCase("dang hoat dong")) {
            btnPutTable.setText("Đặt lại");
            txtMaHD.setEditable(false);
            txtMaKH.setEditable(false);
            String sql = "select top 1 khachhang.makh,hoten,ngaysinh,sdt,socmt,mahd,ngaylap,thanhtien,maban from khachhang join hoadon on khachhang.makh=hoadon.makh where maban=? order by ngaylap DESC";
            try {
                PreparedStatement ps = JDBCHelper.getStmt(sql, mB);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    txtMaKH.setText(rs.getString(1));
                    txtTenKH.setText(rs.getString(2));
                    txtNgaySinh.setText(rs.getString(3));
                    txtSDT.setText(rs.getString(4));
                    txtCMT.setText(rs.getString(5));
                    txtMaHD.setText(rs.getString(6));

                }

            } catch (SQLException ex) {
                Logger.getLogger(DatBanJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            String sql1 = "select * from cthd where mahd=?";
            try {
                PreparedStatement ps1 = JDBCHelper.getStmt(sql1, txtMaHD.getText());
                ResultSet rs1 = ps1.executeQuery();
                while (rs1.next()) {
                    for (int i = 0; i < lst.size(); i++) {
                        if (lst.get(i).getIdFood().equalsIgnoreCase(rs1.getString(2))) {
                            model.addRow(new Object[]{lst.get(i).getNameFood(), lst.get(i).getPrice(), rs1.getInt(3)});
                        }
                    }
                    total();
                }
            } catch (SQLException ex) {
                Logger.getLogger(DatBanJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }
    private void repairCustomer(){
        try {
            String maKH = txtMaKH.getText();
            String hoTen = txtTenKH.getText();
            String SDT = txtSDT.getText();
            String CMT = txtCMT.getText();
            Date ngaySinh = new SimpleDateFormat("yyyy-MM-dd").parse(txtNgaySinh.getText());

            Customer cs = new Customer(maKH, hoTen, ngaySinh, SDT, CMT);
            dao1.update(cs);
        } catch (ParseException ex) {
            Logger.getLogger(DatBanJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private boolean check(){
        try {
            Date date=new SimpleDateFormat("yyyy-MM-dd").parse(txtNgaySinh.getText());
        } catch (ParseException ex) {
           
            JOptionPane.showMessageDialog(this, "Vui lòng nhập ngày sinh đúng định dạng năm-tháng-ngày");
             return false;
        }
        try {
            int sdt=Integer.parseInt(txtSDT.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số điện thoại gồm các chữ số");
            return false;
        } 
        if(txtTenKH.getText().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(this, "Vui lòng không để trống tên khách hàng");
            return false;        
        }else if(txtCMT.getText().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(this, "Vui lòng không để trống số chứng minh thư khách hàng");
            return false;        
        }
        
        return true;
    }
    private void repairBill(String maban){
        String maHD = txtMaHD.getText();
        String maKH = txtMaKH.getText();
        String maNV = Auth.user.getMaNV();
        String maBan = maban;
        float thanhTien = Float.parseFloat(lblTotal.getText());
        Date date = new Date();
        Bill bill = new Bill(maHD, maKH, maNV, maBan, thanhTien, date);
        dao2.update(bill);
    }
    private void updateDetailBill(){
        String sql="delete from cthd where mahd=?";
        JDBCHelper.update(sql, txtMaHD.getText());
    }
}
